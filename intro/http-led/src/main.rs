use anyhow::Result;
use core::str;
use embedded_svc::{
    http::{Headers, Method}, 
    io::{Read, Write},
};
use esp_idf_hal::delay::FreeRtos;
use esp_idf_hal::prelude::Peripherals;
use esp_idf_svc::{
    eventloop::EspSystemEventLoop,
    http::server::{Configuration, EspHttpServer},
};
use std::{
    sync::{Arc, Mutex},
    thread::sleep,
    time::Duration,
    sync::atomic::{AtomicU8, AtomicU32, AtomicBool, Ordering},
};
use std::thread;
use rgb_led::{RGB8, WS2812RMT};
use wifi::wifi;
// If using the `binstart` feature of `esp-idf-sys`, always keep this module imported
use esp_idf_sys as _;
use serde::{Deserialize, Serialize};

// Max payload length
const MAX_LEN: usize = 128;

#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

#[derive(Serialize, Deserialize, Debug, Copy, Clone)]
pub struct UserSettings {
    red: u8,
    blue: u8,
    green: u8,
    mode: bool,
    delay :u32,
    transition: bool,
}

static RED: AtomicU8 =  AtomicU8::new(255);
static GREEN: AtomicU8 =  AtomicU8::new(0);
static BLUE: AtomicU8 =  AtomicU8::new(0);
static MODE_FLASH_LED: AtomicBool =  AtomicBool::new(true);
static DELAY_FLASH_LED: AtomicU32 =  AtomicU32::new(2000);
static MODE_TRANSITION_LED: AtomicBool =  AtomicBool::new(false);

fn main() -> Result<()> {
    esp_idf_sys::link_patches();
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    // Connect to the Wi-Fi network
    let _wifi = wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    )?;

    // Start the LED off yellow
    let led = WS2812RMT::new(peripherals.pins.gpio2, peripherals.rmt.channel0)?;
    let led_main = Arc::new(Mutex::new(led));
    let temp_led = led_main.clone();    
    temp_led.lock().unwrap().set_pixel(RGB8::new(50, 50, 0)).unwrap();

    // Set the HTTP server
    let mut server = EspHttpServer::new(&Configuration::default())?;

    // http://<sta ip>/ handler
    server.fn_handler("/", Method::Get, |request| {
        let html = index_html();
        let mut response = request.into_ok_response()?;
        response.write_all(html.as_bytes())?;
        Ok(())
    })?;

    server.fn_handler("/settings", Method::Post, move |mut request| {
        let len = request.content_len().unwrap_or(0) as usize;

        if len > MAX_LEN {
            request.into_status_response(413)?
                .write_all("Request too big".as_bytes())?;
            return Ok(());
        }

        let mut buf = vec![0; len];
        request.read_exact(&mut buf)?;

        let mut resp = request.into_ok_response()?;
        if let Ok(form) = serde_json::from_slice::<UserSettings>(&buf) {

            MODE_FLASH_LED.store(form.mode, Ordering::Relaxed);
            MODE_TRANSITION_LED.store(form.transition, Ordering::Relaxed);
            RED.store(form.red, Ordering::Relaxed);
            GREEN.store(form.green, Ordering::Relaxed);
            BLUE.store(form.blue, Ordering::Relaxed);
            DELAY_FLASH_LED.store(form.delay, Ordering::Relaxed);

            write!(
                resp,
                "Update > red {}-green {}-blue {}!",
                 form.red, form.green, form.blue
            )?;
        } else {
            resp.write_all("JSON error".as_bytes())?;
        }
        
        Ok(())
    })?;

    println!("Server awaiting connection");

    let handle = thread::spawn({
    move || {
        led_task(temp_led);                                                
        }
    });
    handle.join().unwrap();

    // Prevent program from exiting
    loop {
        sleep(Duration::from_millis(1000));
    }
}

fn led_task(led: Arc<Mutex<WS2812RMT<'_>>>) {

    let ws2812 = led.clone();
    loop {
        if MODE_FLASH_LED.load(Ordering::Relaxed) {
            loop {
                println!("led_task > flashing r {} g {} b {}",RED.load(Ordering::Relaxed),GREEN.load(Ordering::Relaxed),BLUE.load(Ordering::Relaxed));
                if !MODE_FLASH_LED.load(Ordering::Relaxed) {
                    break;
                }

                ws2812
                .lock()
                .unwrap()
                .set_pixel(RGB8::new(
                    0
                    , 0
                    , 0))
                .unwrap();
                FreeRtos::delay_ms(DELAY_FLASH_LED.load(Ordering::Relaxed));
                ws2812
                .lock()
                .unwrap()
                .set_pixel(RGB8::new(
                    RED.load(Ordering::Relaxed)
                    ,GREEN.load(Ordering::Relaxed)
                    , BLUE.load(Ordering::Relaxed)))
                .unwrap();
                FreeRtos::delay_ms(DELAY_FLASH_LED.load(Ordering::Relaxed));
            }
        } else if MODE_TRANSITION_LED.load(Ordering::Relaxed) {
                let mut r = 255;
                let mut g = 0;
                let mut b = 0;                
                for i in 0..255 {

                    if i < 85 {
                        r -= 1;
                        g += 1;
                    } else if i < 170 {
                        g -= 1;
                        b += 1;
                    } else {
                        r += 1;
                        b -= 1;
                    }

                    println!("led_task > r {} g {} b {}",r, g, b);
                    FreeRtos::delay_ms(DELAY_FLASH_LED.load(Ordering::Relaxed));
                    ws2812
                    .lock()
                    .unwrap()
                    .set_pixel(RGB8::new(
                        r
                        , g
                        , b))
                    .unwrap();
                }                
            } else {
                println!("led_task > r {} g {} b {}",RED.load(Ordering::Relaxed),GREEN.load(Ordering::Relaxed),BLUE.load(Ordering::Relaxed));
                ws2812
                .lock()
                .unwrap()
                .set_pixel(RGB8::new(
                    RED.load(Ordering::Relaxed)
                    , GREEN.load(Ordering::Relaxed)
                    , BLUE.load(Ordering::Relaxed)))
                .unwrap();
            }
        sleep(Duration::from_millis(1000));
    }
}

fn templated(content: impl AsRef<str>) -> String {
    format!(
        r#"
<html>
    <head>
        <!-- Required meta tags -->
        <meta charset='utf-8'>
        <meta name='viewport' content='width=device-width, initial-scale=1'>

        <!-- Bootstrap CSS -->
        <link href='https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css' rel='stylesheet' integrity='sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC' crossorigin='anonymous'>
        <script src='https://cdn.jsdelivr.net/npm/@jaames/iro@5'></script>

        <title>http-led server</title>

    </head>
    <body>        
        <div class='container-fluid'>
            <div class='row'>
                <div class='col'>
                    <h3>{}</h3>    
                    <div id='picker'></div>
                </div>
                <div class='col'>
                    <h3>&nbsp;</h3>
                    <form class='row g-3'>
                        <div class='col-md-4'>
                            <label for='red' class='form-label'>R</label>
                            <input type='text' class='form-control' id='red'>
                        </div>
                        <div class='col-md-4'>
                            <label for='green' class='form-label'>G</label>
                            <input type='text' class='form-control' id='green'>
                        </div>
                        <div class='col-md-4'>
                            <label for='blue' class='form-label'>B</label>
                            <input type='text' class='form-control' id='blue'>
                        </div>
                        <div class='col-md-4'>
                            <label for='delai' class='form-label'>Delai</label>
                            <input type='text' class='form-control' id='delai' value='500'>
                        </div>
                        <div class='col-md-8'>&nbsp;</div>
                        <div class='col-md-12'>
                            <div class='form-check form-switch'>
                                <input class='form-check-input' type='checkbox' id='flash' checked>
                                <label class='form-check-label' for='flash'>Mode Flash</label>
                            </div>
                        </div>
                        <div class='col-md-12'>
                            <div class='form-check form-switch'>
                                <input class='form-check-input' type='checkbox' id='transition'>
                                <label class='form-check-label' for='transition'>Mode Transition</label>
                            </div>
                        </div>
                        <div class='col-12'>
                          <button type='button' id='btnUpdateSettings' class='btn btn-primary'>Update</button>
                        </div>
                      </form>                    

                    </div>
            </div>
        </div>

        <script src='https://code.jquery.com/jquery-3.7.1.slim.min.js' integrity='sha256-kmHvs0B+OpCW5GVHUNjv9rOmY0IvSIRcf7zGUDTDQM8=' crossorigin='anonymous'></script>            
        <script>
            $('#red').val('255');
            $('#green').val('0');
            $('#blue').val('0');

	        var colorPicker = new iro.ColorPicker('#picker', {{width:320,color: '#f00'}});
	        colorPicker.on('color:change', function(color) {{
                $(red).val(color.red);
                $(green).val(color.green);
                $(blue).val(color.blue);

                updateSettings();
            }});

            $('#flash').change('change', function(){{
                updateSettings();
            }});
            $('#transition').change('change', function(){{
                updateSettings();
            }});
            $('#btnUpdateSettings').click(function(){{
                updateSettings();
            }});

            function updateSettings() {{

                let red = $('#red').val();
                let green =$('#green').val();
                let blue = $('#blue').val();

                let delai = $('#delai').val();
                let flash = $('#flash').prop('checked');
                let transition = $('#transition').prop('checked');                

                const json = {{'red':Number(red),'green':Number(green),'blue':Number(blue), 'mode': flash, 'delay':Number(delai), 'transition': transition}};

                console.log(json);

                const xhr = new XMLHttpRequest();
                xhr.open('POST', 'http://espressif/settings');
                //xhr.setRequestHeader('Content-Type', 'application/json');
                xhr.setRequestHeader('Content-Type', 'text/plain; charset=UTF-8');
                xhr.onload = () => {{
                    if (xhr.status >= 200 && xhr.status < 300) {{
                        const response = JSON.parse(xhr.responseText);
                        console.log(response);
                    }}
                }};                
                xhr.send(JSON.stringify(json));
            }}

        </script>
    </body>
</html>
"#,
        content.as_ref()
    )
}


fn index_html() -> String {
    templated("Settings")
}